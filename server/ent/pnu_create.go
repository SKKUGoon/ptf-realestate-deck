// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"melp-back/ent/pnu"
	"melp-back/ent/schema"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PnuCreate is the builder for creating a Pnu entity.
type PnuCreate struct {
	config
	mutation *PnuMutation
	hooks    []Hook
}

// SetJibun sets the "jibun" field.
func (pc *PnuCreate) SetJibun(s string) *PnuCreate {
	pc.mutation.SetJibun(s)
	return pc
}

// SetBchk sets the "bchk" field.
func (pc *PnuCreate) SetBchk(s string) *PnuCreate {
	pc.mutation.SetBchk(s)
	return pc
}

// SetPnu sets the "pnu" field.
func (pc *PnuCreate) SetPnu(s string) *PnuCreate {
	pc.mutation.SetPnu(s)
	return pc
}

// SetColAdmSe sets the "col_adm_se" field.
func (pc *PnuCreate) SetColAdmSe(s string) *PnuCreate {
	pc.mutation.SetColAdmSe(s)
	return pc
}

// SetGeometry sets the "geometry" field.
func (pc *PnuCreate) SetGeometry(s *schema.Geometry) *PnuCreate {
	pc.mutation.SetGeometry(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PnuCreate) SetID(s string) *PnuCreate {
	pc.mutation.SetID(s)
	return pc
}

// Mutation returns the PnuMutation object of the builder.
func (pc *PnuCreate) Mutation() *PnuMutation {
	return pc.mutation
}

// Save creates the Pnu in the database.
func (pc *PnuCreate) Save(ctx context.Context) (*Pnu, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PnuCreate) SaveX(ctx context.Context) *Pnu {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PnuCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PnuCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PnuCreate) check() error {
	if _, ok := pc.mutation.Jibun(); !ok {
		return &ValidationError{Name: "jibun", err: errors.New(`ent: missing required field "Pnu.jibun"`)}
	}
	if _, ok := pc.mutation.Bchk(); !ok {
		return &ValidationError{Name: "bchk", err: errors.New(`ent: missing required field "Pnu.bchk"`)}
	}
	if _, ok := pc.mutation.Pnu(); !ok {
		return &ValidationError{Name: "pnu", err: errors.New(`ent: missing required field "Pnu.pnu"`)}
	}
	if _, ok := pc.mutation.ColAdmSe(); !ok {
		return &ValidationError{Name: "col_adm_se", err: errors.New(`ent: missing required field "Pnu.col_adm_se"`)}
	}
	if _, ok := pc.mutation.Geometry(); !ok {
		return &ValidationError{Name: "geometry", err: errors.New(`ent: missing required field "Pnu.geometry"`)}
	}
	return nil
}

func (pc *PnuCreate) sqlSave(ctx context.Context) (*Pnu, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Pnu.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PnuCreate) createSpec() (*Pnu, *sqlgraph.CreateSpec) {
	var (
		_node = &Pnu{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pnu.Table, sqlgraph.NewFieldSpec(pnu.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Jibun(); ok {
		_spec.SetField(pnu.FieldJibun, field.TypeString, value)
		_node.Jibun = value
	}
	if value, ok := pc.mutation.Bchk(); ok {
		_spec.SetField(pnu.FieldBchk, field.TypeString, value)
		_node.Bchk = value
	}
	if value, ok := pc.mutation.Pnu(); ok {
		_spec.SetField(pnu.FieldPnu, field.TypeString, value)
		_node.Pnu = value
	}
	if value, ok := pc.mutation.ColAdmSe(); ok {
		_spec.SetField(pnu.FieldColAdmSe, field.TypeString, value)
		_node.ColAdmSe = value
	}
	if value, ok := pc.mutation.Geometry(); ok {
		_spec.SetField(pnu.FieldGeometry, field.TypeOther, value)
		_node.Geometry = value
	}
	return _node, _spec
}

// PnuCreateBulk is the builder for creating many Pnu entities in bulk.
type PnuCreateBulk struct {
	config
	err      error
	builders []*PnuCreate
}

// Save creates the Pnu entities in the database.
func (pcb *PnuCreateBulk) Save(ctx context.Context) ([]*Pnu, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pnu, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PnuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PnuCreateBulk) SaveX(ctx context.Context) []*Pnu {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PnuCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PnuCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
