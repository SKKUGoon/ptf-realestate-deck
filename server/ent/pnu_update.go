// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"melp-back/ent/pnu"
	"melp-back/ent/predicate"
	"melp-back/ent/schema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PnuUpdate is the builder for updating Pnu entities.
type PnuUpdate struct {
	config
	hooks    []Hook
	mutation *PnuMutation
}

// Where appends a list predicates to the PnuUpdate builder.
func (pu *PnuUpdate) Where(ps ...predicate.Pnu) *PnuUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetJibun sets the "jibun" field.
func (pu *PnuUpdate) SetJibun(s string) *PnuUpdate {
	pu.mutation.SetJibun(s)
	return pu
}

// SetNillableJibun sets the "jibun" field if the given value is not nil.
func (pu *PnuUpdate) SetNillableJibun(s *string) *PnuUpdate {
	if s != nil {
		pu.SetJibun(*s)
	}
	return pu
}

// SetBchk sets the "bchk" field.
func (pu *PnuUpdate) SetBchk(s string) *PnuUpdate {
	pu.mutation.SetBchk(s)
	return pu
}

// SetNillableBchk sets the "bchk" field if the given value is not nil.
func (pu *PnuUpdate) SetNillableBchk(s *string) *PnuUpdate {
	if s != nil {
		pu.SetBchk(*s)
	}
	return pu
}

// SetPnu sets the "pnu" field.
func (pu *PnuUpdate) SetPnu(s string) *PnuUpdate {
	pu.mutation.SetPnu(s)
	return pu
}

// SetNillablePnu sets the "pnu" field if the given value is not nil.
func (pu *PnuUpdate) SetNillablePnu(s *string) *PnuUpdate {
	if s != nil {
		pu.SetPnu(*s)
	}
	return pu
}

// SetColAdmSe sets the "col_adm_se" field.
func (pu *PnuUpdate) SetColAdmSe(s string) *PnuUpdate {
	pu.mutation.SetColAdmSe(s)
	return pu
}

// SetNillableColAdmSe sets the "col_adm_se" field if the given value is not nil.
func (pu *PnuUpdate) SetNillableColAdmSe(s *string) *PnuUpdate {
	if s != nil {
		pu.SetColAdmSe(*s)
	}
	return pu
}

// SetGeometry sets the "geometry" field.
func (pu *PnuUpdate) SetGeometry(s *schema.Geometry) *PnuUpdate {
	pu.mutation.SetGeometry(s)
	return pu
}

// Mutation returns the PnuMutation object of the builder.
func (pu *PnuUpdate) Mutation() *PnuMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PnuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PnuUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PnuUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PnuUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PnuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pnu.Table, pnu.Columns, sqlgraph.NewFieldSpec(pnu.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Jibun(); ok {
		_spec.SetField(pnu.FieldJibun, field.TypeString, value)
	}
	if value, ok := pu.mutation.Bchk(); ok {
		_spec.SetField(pnu.FieldBchk, field.TypeString, value)
	}
	if value, ok := pu.mutation.Pnu(); ok {
		_spec.SetField(pnu.FieldPnu, field.TypeString, value)
	}
	if value, ok := pu.mutation.ColAdmSe(); ok {
		_spec.SetField(pnu.FieldColAdmSe, field.TypeString, value)
	}
	if value, ok := pu.mutation.Geometry(); ok {
		_spec.SetField(pnu.FieldGeometry, field.TypeOther, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pnu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PnuUpdateOne is the builder for updating a single Pnu entity.
type PnuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PnuMutation
}

// SetJibun sets the "jibun" field.
func (puo *PnuUpdateOne) SetJibun(s string) *PnuUpdateOne {
	puo.mutation.SetJibun(s)
	return puo
}

// SetNillableJibun sets the "jibun" field if the given value is not nil.
func (puo *PnuUpdateOne) SetNillableJibun(s *string) *PnuUpdateOne {
	if s != nil {
		puo.SetJibun(*s)
	}
	return puo
}

// SetBchk sets the "bchk" field.
func (puo *PnuUpdateOne) SetBchk(s string) *PnuUpdateOne {
	puo.mutation.SetBchk(s)
	return puo
}

// SetNillableBchk sets the "bchk" field if the given value is not nil.
func (puo *PnuUpdateOne) SetNillableBchk(s *string) *PnuUpdateOne {
	if s != nil {
		puo.SetBchk(*s)
	}
	return puo
}

// SetPnu sets the "pnu" field.
func (puo *PnuUpdateOne) SetPnu(s string) *PnuUpdateOne {
	puo.mutation.SetPnu(s)
	return puo
}

// SetNillablePnu sets the "pnu" field if the given value is not nil.
func (puo *PnuUpdateOne) SetNillablePnu(s *string) *PnuUpdateOne {
	if s != nil {
		puo.SetPnu(*s)
	}
	return puo
}

// SetColAdmSe sets the "col_adm_se" field.
func (puo *PnuUpdateOne) SetColAdmSe(s string) *PnuUpdateOne {
	puo.mutation.SetColAdmSe(s)
	return puo
}

// SetNillableColAdmSe sets the "col_adm_se" field if the given value is not nil.
func (puo *PnuUpdateOne) SetNillableColAdmSe(s *string) *PnuUpdateOne {
	if s != nil {
		puo.SetColAdmSe(*s)
	}
	return puo
}

// SetGeometry sets the "geometry" field.
func (puo *PnuUpdateOne) SetGeometry(s *schema.Geometry) *PnuUpdateOne {
	puo.mutation.SetGeometry(s)
	return puo
}

// Mutation returns the PnuMutation object of the builder.
func (puo *PnuUpdateOne) Mutation() *PnuMutation {
	return puo.mutation
}

// Where appends a list predicates to the PnuUpdate builder.
func (puo *PnuUpdateOne) Where(ps ...predicate.Pnu) *PnuUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PnuUpdateOne) Select(field string, fields ...string) *PnuUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pnu entity.
func (puo *PnuUpdateOne) Save(ctx context.Context) (*Pnu, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PnuUpdateOne) SaveX(ctx context.Context) *Pnu {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PnuUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PnuUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PnuUpdateOne) sqlSave(ctx context.Context) (_node *Pnu, err error) {
	_spec := sqlgraph.NewUpdateSpec(pnu.Table, pnu.Columns, sqlgraph.NewFieldSpec(pnu.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pnu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pnu.FieldID)
		for _, f := range fields {
			if !pnu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pnu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Jibun(); ok {
		_spec.SetField(pnu.FieldJibun, field.TypeString, value)
	}
	if value, ok := puo.mutation.Bchk(); ok {
		_spec.SetField(pnu.FieldBchk, field.TypeString, value)
	}
	if value, ok := puo.mutation.Pnu(); ok {
		_spec.SetField(pnu.FieldPnu, field.TypeString, value)
	}
	if value, ok := puo.mutation.ColAdmSe(); ok {
		_spec.SetField(pnu.FieldColAdmSe, field.TypeString, value)
	}
	if value, ok := puo.mutation.Geometry(); ok {
		_spec.SetField(pnu.FieldGeometry, field.TypeOther, value)
	}
	_node = &Pnu{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pnu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
