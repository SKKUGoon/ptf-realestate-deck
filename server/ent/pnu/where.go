// Code generated by ent, DO NOT EDIT.

package pnu

import (
	"melp-back/ent/predicate"
	"melp-back/ent/schema"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Pnu {
	return predicate.Pnu(sql.FieldContainsFold(FieldID, id))
}

// Jibun applies equality check predicate on the "jibun" field. It's identical to JibunEQ.
func Jibun(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldJibun, v))
}

// Bchk applies equality check predicate on the "bchk" field. It's identical to BchkEQ.
func Bchk(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldBchk, v))
}

// Pnu applies equality check predicate on the "pnu" field. It's identical to PnuEQ.
func Pnu(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldPnu, v))
}

// ColAdmSe applies equality check predicate on the "col_adm_se" field. It's identical to ColAdmSeEQ.
func ColAdmSe(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldColAdmSe, v))
}

// Geometry applies equality check predicate on the "geometry" field. It's identical to GeometryEQ.
func Geometry(v *schema.Geometry) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldGeometry, v))
}

// JibunEQ applies the EQ predicate on the "jibun" field.
func JibunEQ(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldJibun, v))
}

// JibunNEQ applies the NEQ predicate on the "jibun" field.
func JibunNEQ(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNEQ(FieldJibun, v))
}

// JibunIn applies the In predicate on the "jibun" field.
func JibunIn(vs ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldIn(FieldJibun, vs...))
}

// JibunNotIn applies the NotIn predicate on the "jibun" field.
func JibunNotIn(vs ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNotIn(FieldJibun, vs...))
}

// JibunGT applies the GT predicate on the "jibun" field.
func JibunGT(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGT(FieldJibun, v))
}

// JibunGTE applies the GTE predicate on the "jibun" field.
func JibunGTE(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGTE(FieldJibun, v))
}

// JibunLT applies the LT predicate on the "jibun" field.
func JibunLT(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLT(FieldJibun, v))
}

// JibunLTE applies the LTE predicate on the "jibun" field.
func JibunLTE(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLTE(FieldJibun, v))
}

// JibunContains applies the Contains predicate on the "jibun" field.
func JibunContains(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldContains(FieldJibun, v))
}

// JibunHasPrefix applies the HasPrefix predicate on the "jibun" field.
func JibunHasPrefix(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldHasPrefix(FieldJibun, v))
}

// JibunHasSuffix applies the HasSuffix predicate on the "jibun" field.
func JibunHasSuffix(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldHasSuffix(FieldJibun, v))
}

// JibunEqualFold applies the EqualFold predicate on the "jibun" field.
func JibunEqualFold(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEqualFold(FieldJibun, v))
}

// JibunContainsFold applies the ContainsFold predicate on the "jibun" field.
func JibunContainsFold(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldContainsFold(FieldJibun, v))
}

// BchkEQ applies the EQ predicate on the "bchk" field.
func BchkEQ(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldBchk, v))
}

// BchkNEQ applies the NEQ predicate on the "bchk" field.
func BchkNEQ(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNEQ(FieldBchk, v))
}

// BchkIn applies the In predicate on the "bchk" field.
func BchkIn(vs ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldIn(FieldBchk, vs...))
}

// BchkNotIn applies the NotIn predicate on the "bchk" field.
func BchkNotIn(vs ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNotIn(FieldBchk, vs...))
}

// BchkGT applies the GT predicate on the "bchk" field.
func BchkGT(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGT(FieldBchk, v))
}

// BchkGTE applies the GTE predicate on the "bchk" field.
func BchkGTE(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGTE(FieldBchk, v))
}

// BchkLT applies the LT predicate on the "bchk" field.
func BchkLT(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLT(FieldBchk, v))
}

// BchkLTE applies the LTE predicate on the "bchk" field.
func BchkLTE(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLTE(FieldBchk, v))
}

// BchkContains applies the Contains predicate on the "bchk" field.
func BchkContains(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldContains(FieldBchk, v))
}

// BchkHasPrefix applies the HasPrefix predicate on the "bchk" field.
func BchkHasPrefix(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldHasPrefix(FieldBchk, v))
}

// BchkHasSuffix applies the HasSuffix predicate on the "bchk" field.
func BchkHasSuffix(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldHasSuffix(FieldBchk, v))
}

// BchkEqualFold applies the EqualFold predicate on the "bchk" field.
func BchkEqualFold(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEqualFold(FieldBchk, v))
}

// BchkContainsFold applies the ContainsFold predicate on the "bchk" field.
func BchkContainsFold(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldContainsFold(FieldBchk, v))
}

// PnuEQ applies the EQ predicate on the "pnu" field.
func PnuEQ(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldPnu, v))
}

// PnuNEQ applies the NEQ predicate on the "pnu" field.
func PnuNEQ(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNEQ(FieldPnu, v))
}

// PnuIn applies the In predicate on the "pnu" field.
func PnuIn(vs ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldIn(FieldPnu, vs...))
}

// PnuNotIn applies the NotIn predicate on the "pnu" field.
func PnuNotIn(vs ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNotIn(FieldPnu, vs...))
}

// PnuGT applies the GT predicate on the "pnu" field.
func PnuGT(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGT(FieldPnu, v))
}

// PnuGTE applies the GTE predicate on the "pnu" field.
func PnuGTE(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGTE(FieldPnu, v))
}

// PnuLT applies the LT predicate on the "pnu" field.
func PnuLT(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLT(FieldPnu, v))
}

// PnuLTE applies the LTE predicate on the "pnu" field.
func PnuLTE(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLTE(FieldPnu, v))
}

// PnuContains applies the Contains predicate on the "pnu" field.
func PnuContains(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldContains(FieldPnu, v))
}

// PnuHasPrefix applies the HasPrefix predicate on the "pnu" field.
func PnuHasPrefix(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldHasPrefix(FieldPnu, v))
}

// PnuHasSuffix applies the HasSuffix predicate on the "pnu" field.
func PnuHasSuffix(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldHasSuffix(FieldPnu, v))
}

// PnuEqualFold applies the EqualFold predicate on the "pnu" field.
func PnuEqualFold(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEqualFold(FieldPnu, v))
}

// PnuContainsFold applies the ContainsFold predicate on the "pnu" field.
func PnuContainsFold(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldContainsFold(FieldPnu, v))
}

// ColAdmSeEQ applies the EQ predicate on the "col_adm_se" field.
func ColAdmSeEQ(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldColAdmSe, v))
}

// ColAdmSeNEQ applies the NEQ predicate on the "col_adm_se" field.
func ColAdmSeNEQ(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNEQ(FieldColAdmSe, v))
}

// ColAdmSeIn applies the In predicate on the "col_adm_se" field.
func ColAdmSeIn(vs ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldIn(FieldColAdmSe, vs...))
}

// ColAdmSeNotIn applies the NotIn predicate on the "col_adm_se" field.
func ColAdmSeNotIn(vs ...string) predicate.Pnu {
	return predicate.Pnu(sql.FieldNotIn(FieldColAdmSe, vs...))
}

// ColAdmSeGT applies the GT predicate on the "col_adm_se" field.
func ColAdmSeGT(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGT(FieldColAdmSe, v))
}

// ColAdmSeGTE applies the GTE predicate on the "col_adm_se" field.
func ColAdmSeGTE(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldGTE(FieldColAdmSe, v))
}

// ColAdmSeLT applies the LT predicate on the "col_adm_se" field.
func ColAdmSeLT(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLT(FieldColAdmSe, v))
}

// ColAdmSeLTE applies the LTE predicate on the "col_adm_se" field.
func ColAdmSeLTE(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldLTE(FieldColAdmSe, v))
}

// ColAdmSeContains applies the Contains predicate on the "col_adm_se" field.
func ColAdmSeContains(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldContains(FieldColAdmSe, v))
}

// ColAdmSeHasPrefix applies the HasPrefix predicate on the "col_adm_se" field.
func ColAdmSeHasPrefix(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldHasPrefix(FieldColAdmSe, v))
}

// ColAdmSeHasSuffix applies the HasSuffix predicate on the "col_adm_se" field.
func ColAdmSeHasSuffix(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldHasSuffix(FieldColAdmSe, v))
}

// ColAdmSeEqualFold applies the EqualFold predicate on the "col_adm_se" field.
func ColAdmSeEqualFold(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldEqualFold(FieldColAdmSe, v))
}

// ColAdmSeContainsFold applies the ContainsFold predicate on the "col_adm_se" field.
func ColAdmSeContainsFold(v string) predicate.Pnu {
	return predicate.Pnu(sql.FieldContainsFold(FieldColAdmSe, v))
}

// GeometryEQ applies the EQ predicate on the "geometry" field.
func GeometryEQ(v *schema.Geometry) predicate.Pnu {
	return predicate.Pnu(sql.FieldEQ(FieldGeometry, v))
}

// GeometryNEQ applies the NEQ predicate on the "geometry" field.
func GeometryNEQ(v *schema.Geometry) predicate.Pnu {
	return predicate.Pnu(sql.FieldNEQ(FieldGeometry, v))
}

// GeometryIn applies the In predicate on the "geometry" field.
func GeometryIn(vs ...*schema.Geometry) predicate.Pnu {
	return predicate.Pnu(sql.FieldIn(FieldGeometry, vs...))
}

// GeometryNotIn applies the NotIn predicate on the "geometry" field.
func GeometryNotIn(vs ...*schema.Geometry) predicate.Pnu {
	return predicate.Pnu(sql.FieldNotIn(FieldGeometry, vs...))
}

// GeometryGT applies the GT predicate on the "geometry" field.
func GeometryGT(v *schema.Geometry) predicate.Pnu {
	return predicate.Pnu(sql.FieldGT(FieldGeometry, v))
}

// GeometryGTE applies the GTE predicate on the "geometry" field.
func GeometryGTE(v *schema.Geometry) predicate.Pnu {
	return predicate.Pnu(sql.FieldGTE(FieldGeometry, v))
}

// GeometryLT applies the LT predicate on the "geometry" field.
func GeometryLT(v *schema.Geometry) predicate.Pnu {
	return predicate.Pnu(sql.FieldLT(FieldGeometry, v))
}

// GeometryLTE applies the LTE predicate on the "geometry" field.
func GeometryLTE(v *schema.Geometry) predicate.Pnu {
	return predicate.Pnu(sql.FieldLTE(FieldGeometry, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pnu) predicate.Pnu {
	return predicate.Pnu(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pnu) predicate.Pnu {
	return predicate.Pnu(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pnu) predicate.Pnu {
	return predicate.Pnu(sql.NotPredicates(p))
}
