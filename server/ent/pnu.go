// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"melp-back/ent/pnu"
	"melp-back/ent/schema"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Pnu is the model entity for the Pnu schema.
type Pnu struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Jibun holds the value of the "jibun" field.
	Jibun string `json:"jibun,omitempty"`
	// Bchk holds the value of the "bchk" field.
	Bchk string `json:"bchk,omitempty"`
	// Pnu holds the value of the "pnu" field.
	Pnu string `json:"pnu,omitempty"`
	// ColAdmSe holds the value of the "col_adm_se" field.
	ColAdmSe string `json:"col_adm_se,omitempty"`
	// Geometry holds the value of the "geometry" field.
	Geometry     *schema.Geometry `json:"geometry,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pnu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pnu.FieldGeometry:
			values[i] = new(schema.Geometry)
		case pnu.FieldID, pnu.FieldJibun, pnu.FieldBchk, pnu.FieldPnu, pnu.FieldColAdmSe:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pnu fields.
func (pn *Pnu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pnu.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pn.ID = value.String
			}
		case pnu.FieldJibun:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jibun", values[i])
			} else if value.Valid {
				pn.Jibun = value.String
			}
		case pnu.FieldBchk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bchk", values[i])
			} else if value.Valid {
				pn.Bchk = value.String
			}
		case pnu.FieldPnu:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pnu", values[i])
			} else if value.Valid {
				pn.Pnu = value.String
			}
		case pnu.FieldColAdmSe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field col_adm_se", values[i])
			} else if value.Valid {
				pn.ColAdmSe = value.String
			}
		case pnu.FieldGeometry:
			if value, ok := values[i].(*schema.Geometry); !ok {
				return fmt.Errorf("unexpected type %T for field geometry", values[i])
			} else if value != nil {
				pn.Geometry = value
			}
		default:
			pn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pnu.
// This includes values selected through modifiers, order, etc.
func (pn *Pnu) Value(name string) (ent.Value, error) {
	return pn.selectValues.Get(name)
}

// Update returns a builder for updating this Pnu.
// Note that you need to call Pnu.Unwrap() before calling this method if this Pnu
// was returned from a transaction, and the transaction was committed or rolled back.
func (pn *Pnu) Update() *PnuUpdateOne {
	return NewPnuClient(pn.config).UpdateOne(pn)
}

// Unwrap unwraps the Pnu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pn *Pnu) Unwrap() *Pnu {
	_tx, ok := pn.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pnu is not a transactional entity")
	}
	pn.config.driver = _tx.drv
	return pn
}

// String implements the fmt.Stringer.
func (pn *Pnu) String() string {
	var builder strings.Builder
	builder.WriteString("Pnu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pn.ID))
	builder.WriteString("jibun=")
	builder.WriteString(pn.Jibun)
	builder.WriteString(", ")
	builder.WriteString("bchk=")
	builder.WriteString(pn.Bchk)
	builder.WriteString(", ")
	builder.WriteString("pnu=")
	builder.WriteString(pn.Pnu)
	builder.WriteString(", ")
	builder.WriteString("col_adm_se=")
	builder.WriteString(pn.ColAdmSe)
	builder.WriteString(", ")
	builder.WriteString("geometry=")
	builder.WriteString(fmt.Sprintf("%v", pn.Geometry))
	builder.WriteByte(')')
	return builder.String()
}

// Pnus is a parsable slice of Pnu.
type Pnus []*Pnu
